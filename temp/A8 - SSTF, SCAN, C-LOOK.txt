Assignment No.: 8
Title: Implement the C program for Disk Scheduling Algorithms: SSTF, SCAN, C-Look considering the initial head position moving away from the spindle. 

Code:
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<sys/types.h>
#include<unistd.h>
#include<wait.h>
int choice,track,no_req,head,head1,distance;
int disc_req[100],finish[100];
void menu()
{
    printf("\n\n********MENU********");
    printf("\n1. Input data\n 2. SSTF \n 3. SCAN \n 4. C-LOOK \n 5. Exit");
    printf("\n\n Enter your choice: ");
    scanf("%d",&choice);
}
void input()
{
    int i;
    
    printf("Enter total number of disc requests: ");          
    scanf("%d",&no_req);
    printf("\n Enter disc requests in FCFS order: ");
    for(i=0;i<no_req;i++)
    {
        scanf("%d",&disc_req[i]);
        
    }
    printf("\n Enter current head position: ");
    scanf("%d",&head1);

}
/*Shortest-Seek-Time-First (SSTF) takes the current head position, and
adds the position closest to the current head. This new position now becomes
the head, then this system repeats. 
First we sort the array. Then We have counters for above and below start 
index that we decrement if used. Once these equal to REQUEST-2 (excluding 
start index) we exit. */
void sstf()
{
    int min,diff;
    int pending=no_req;
    int i,distance=0,index;
    head=head1;
  
    for(i=0;i<no_req;i++)
    {
        finish[i]=0;              
    }

    printf("\n%d=>",head);
    
    while(pending>0)
    {   min=9999;
    
        for(i=0;i<no_req;i++)
        {
            diff=abs(head-disc_req[i]);
            if(finish[i]==0 && diff<min)
            {
                min=diff;
                index=i;
            }
        }
        finish[index]=1;
        distance+=abs(head-disc_req[index]);
        head=disc_req[index];
        pending--;
        printf("%d=>",head);
    }
    printf("End");
    printf("\n\n Total Distance Traversed=%d",distance);
}

void sort()
{
    int i,j,temp;
    for(i=0;i<no_req;i++)
    {
        for(j=0;j<no_req;j++)
        {
            if(disc_req[i]<disc_req[j])
            {
                temp=disc_req[i];
                disc_req[i]=disc_req[j];
                disc_req[j]=temp;
            }
        }
    }
}
/* SCAN - array is already sorted from sstf. SCAN starts from one left of start, 
and continually goes down to zero (if included in randome array or not). Then 
starts at one higher than start and continually goes up to highest value*/
void scan()
{
    int index,dir;
    int i;
    distance=0;
    head=head1;
    printf("\n Enter the direction of head \n 1 - Towars higher disc(Right) \n 0 -towards lower disc(left)");
    scanf("%d",&dir);
    sort();
    printf("\n Sorted Disc requests are: ");
    for(i=0;i<no_req;i++)
    {
        
        printf("  %d",disc_req[i]);
    }
    
    i=0;
    while(head>=disc_req[i])
    {
        index=i;
        i++;
    }
    printf("\n index=%d",index);
    printf("\n%d=>",head);
    if(dir==1)
    {
        sort();
        for(i=index+1;i<no_req;i++)
        {
            printf("%d=>",disc_req[i]);
            distance+=abs(head-disc_req[i]);
            head=disc_req[i];          
        }
        distance+=abs(head-(track-1));
        printf("%d=>",track-1);
        head=track-1;
        for(i=index;i>=0;i--)
        {
            printf("%d=>",disc_req[i]);
            distance+=abs(head-disc_req[i]);
            head=disc_req[i];          
        }
    }
    else
    {
        sort();
        for(i=index;i>=0;i--)
        {
            printf("%d=>",disc_req[i]);
            distance+=abs(head-disc_req[i]);
            head=disc_req[i];          
        }
        distance+=abs(head-0);
        head=0;
        printf("0=>");
        for(i=index+1;i<no_req;i++)
        {
            printf("%d=>",disc_req[i]);
            distance+=abs(head-disc_req[i]);
            head=disc_req[i];          
        }
        
    }
    printf("End");
    printf("\n Total Distance Traversed=%d",distance);
}
/* C-Look - Starts from value after start value, goes to highest value, 
then goes to smallest value and increases until value before start value */
void clook()
{
    int index,dir;
    int i;
    distance=0;
    head=head1;
    printf("\n Enter the direction of head \n 1 - Towars higher disc \n 0 -towards lower disc");
    scanf("%d",&dir);
    sort();
    printf("\n Sorted Disc requests are: ");
    for(i=0;i<no_req;i++)
    {
        
        printf("  %d",disc_req[i]);
    }
    
    i=0;
    while(head>=disc_req[i])
    {
        index=i;
        i++;
    }
    printf("\n index=%d",index);
    printf("\n%d=>",head);
    if(dir==1)
    {
        sort();
        for(i=index+1;i<no_req;i++)
        {
            printf("%d=>",disc_req[i]);
            distance+=abs(head-disc_req[i]);
            head=disc_req[i];          
        }
        for(i=0;i<index;i++)
        {
            printf("%d=>",disc_req[i]);
            distance+=abs(head-disc_req[i]);
            head=disc_req[i];          
        }
    }
    else
    {
        sort();
        for(i=index;i>=0;i--)
        {
            printf("%d=>",disc_req[i]);
            distance+=abs(head-disc_req[i]);
            head=disc_req[i];          
        }
        for(i=(no_req-1);i>index;i--)
        {
            printf("%d=>",disc_req[i]);
            distance+=abs(head-disc_req[i]);
            head=disc_req[i];          
        }
        
    }
    printf("End");
    printf("\n Total Distance Traversed=%d",distance);
}

int main()
{
    while(1)
    {
        menu();
        switch(choice)
        {
        case 1: input();
            break;
        case 2: sstf();
            break;
        case 3: scan();
            break;
        case 4: clook();
            break;
        case 5: exit (0);       
            break;
        default:
            printf("\n Enter valid choice");
            break;
        }
    }
    return 0;
}

Terminal Operation:
disk.c
./a.out

********MENU********
1. Input data
2. SSTF 
3. SCAN 
4. C-LOOK 
5. Exit

Enter your choice: 1
Enter total number of disc requests: 7

Enter disc requests in FCFS order: 82
170
43
140
24
16
190

Enter current head position: 50

********MENU********
1. Input data
2. SSTF 
3. SCAN 
4. C-LOOK 
5. Exit

Enter your choice: 2

50=>43=>24=>16=>82=>140=>170=>190=>End

Total Distance Traversed = 208

********MENU********
1. Input data
2. SSTF 
3. SCAN 
4. C-LOOK 
5. Exit

Enter your choice: 3

 Enter the direction of head 
 1 - Towars higher disc(Right) 
 0 -towards lower disc(left)
 0

 Sorted Disc requests are:   16  24  43  82  140  170  190
 index=2
50=>43=>24=>16=>0=>82=>140=>170=>190=>End
 Total Distance Traversed = 240

********MENU********
1. Input data
2. SSTF 
3. SCAN 
4. C-LOOK 
5. Exit

Enter your choice: 4

Enter the direction of head 
 1 - Towars higher disc 
 0 -towards lower disc
 1

Sorted Disc requests are:   16  24  43  82  140  170  190
 index=2
50=>82=>140=>170=>190=>16=>24=>End
Total Distance Traversed = 322

********MENU********
1. Input data
2. SSTF 
3. SCAN 
4. C-LOOK 
5. Exit

Enter your choice: 5

Assignment No.: 7 (B)
Title: Inter-process Communication using Shared Memory using System V.
Application to demonstrate: Client and Server Programs in which server process creates a shared memory segment and writes the
message to the shared memory segment. Client process reads the message from the shared memory
segment and displays it to the screen.

Code:
shmser code:
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#include <stdlib.h>
#define MAXSIZE   30

int main()
{
	char c;
	int shmid;
	key_t key;
	char *shm, *s;
	
	key=5678; //get indentifier for shared memory 
	if((shmid = shmget(key, MAXSIZE, IPC_CREAT | 0666))< 0)
	{
		perror("shmget");
		exit(1);
	}
	
	//attach shared memory
	if((shm = shmat(shmid, NULL, 0)) == (char *) -1)
	{
		perror("shmat");
		exit(1);
	}
	
	s = shm;
	printf("\n Enter data to put in shared memory:");
	while((c = getchar())!='#')
	*s++ = c;
	
	//detach shared memory 
	shmdt(s);
	exit(0);
}

shmcli code:
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#include <stdlib.h>
#define MAXSIZE     27

int main()
{
	int shmid;
	key_t key;
	char *shm, *s;
	
	key = 5678;
	//get indentifier of shared memory 
	if((shmid = shmget(key, MAXSIZE, 0666)) < 0)
	{
		perror("shmget");
		exit(1);
	}
	
	//attach shared memory 
	if((shm = shmat(shmid, NULL, 0)) == (char *) -1)
	{
		perror("shmat");
		exit(1);
	}
	
	//Now read what the server put in the memory 
	for(s = shm; *s != '\0'; s++)
		putchar(*s);
	putchar('\n');
	
	//detach shared memory
	shmdt(s);

	//destroy shared memory 
	shmctl(shmid, IPC_RMID, NULL);
	
	exit(0);
}

Terminal Operation:
shmser Output:
shmser.c -o ser
./ser

 Enter data to put in shared memory:hello
world
#

shmcli Output:
gcc shmcli.c -o cli
./cli
hello
world

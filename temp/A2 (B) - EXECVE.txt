Assignment No.: 02 (B)
Title: Implement the C program in which main program accepts an array. Main program uses the FORK system call to create a new process called a child process. Parent process sorts an array and passes the sorted array to child process through the command line arguments of EXECVE system call. The child process uses EXECVE system callto load new program which display array in reverse order.

Code:
Parent File/ Class: 
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>

int main(int argc, char*argv[])
{
	int val[10],ele;
	pid_t pid;
	char* cval[10];
	char *newenviron[] = { NULL };
	int i,j,temp,n;
	printf("\nEnter the size for an array: ");
	scanf("%d",&n);
	printf("\nEnter %d elements: ",n);
	for(i=0;i<n;i++)
		scanf("%d",&val[i]);
	
	printf("\nEntered elements are: ");
	for(i=0;i<n;i++)
		printf("\t%d",val[i]);
		
	for(i=1;i<n;i++)
	{
		for(j=0;j<n-1;j++)
		{
			if(val[j] > val[j+1])
			{
				temp = val[j];
				val[j] = val[j+1];
				val[j+1] = temp;
			}
		}
	}			
	
	printf("\nSorted elements are: ");
	for(i=0;i<n;i++)
		printf("\t%d",val[i]);
		
	for(i=0;i < n+1; i++)
	{
		char a[sizeof(int)];
		snprintf(a, sizeof(int), "%d", val[i]);
		cval[i] = malloc(sizeof(a));
		strcpy(cval[i], a);
	}
	
	cval[i] = NULL;
	printf("\nForking a child process...");
	pid = fork();
	if(pid == 0)
	{
		execve(argv[1], cval, newenviron);
		perror("Error in execve call...");
	}
	printf("\nArgc of parent is: %d\n", argc);
}

Child File/ Class:
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int main(int argc, char *argv[], char *en[])
{
	int i,j,c,ele,temp,cnt;
	int arr[argc];
	
	for(j = 0; j < argc-1; j++)
	{
		int n = atoi(argv[j]);
		arr[j] = n;
	}
	cnt = argc - 1;
	j = cnt -1;
	for(i = 0; i < (int)(cnt/2);i++)
	{
		temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
		j--;
	}
	
	printf("\nInside the child process...");
	printf("\nElements reversed in the given Array are: ");
	for(i=0;i<cnt;i++)
		printf("%d\t", arr[i]);
	printf("\nArgc of child is: %d\n", argc);
}

Terminal Output:
gcc exep.c -o parent 
gcc exec.c -o child 
./parent ./child

Enter the size for an array: 5

Enter 5 elements: 12
50
36
45
20

Entered elements are: 	12	50	36	45	20
Sorted elements are: 	12	20	36	45	50
Forking a child process...
Argc of parent is: 2
 
Inside the child process...
Elements reversed in the given Array are: 50	45	36	20	12	
Argc of child is: 6

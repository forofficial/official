Assignment No.: 5
Title: Implement the C program forDeadlock Avoidance Algorithm: Bankers Algorithm.

Code:
#include <stdlib.h>
#include<stdio.h>
void input();
void safe_seq();
void show();
void request();

int n, m, i, j, k, alloc[20][20], max[20][20], available[20];
    int f[20],ans[20], ind=0, need[20][20],req[10];   // ans[] array will be used to store the SAFE SEQUENCE in the end. 
    
void main()
{   
    int ch;
    input();
    show();
    do{
    printf("\n1.safe sequence\t\n2.request\t\n3.exit");
    printf("\nEnter choice : ");
    scanf("%d",&ch);
    switch(ch)
    {
	case 1:
	safe_seq();
	        break;
	        
	case 2 :
	request();
		break;
		
	default:
		printf("Invalid choice\n");
	
	
    }}while(ch!=4);
    
}

void input()
{
    printf("Enter number of processes: ");        //Reading the number of Processes from the input.
    scanf("%d",&n);
    
    printf("Enter the number of Resources: ");   //Reading the number of Resources from the input.
    scanf("%d",&m);
    
    
    printf("Enter the Allocation Matrix\n");     //Reading the Allocation Values to the Matrix 'alloc[][]'
	for(i=0;i< n;i++)
	{
		for(j=0;j< m;j++)
		{
			scanf("%d",&alloc[i][j]);
		}

	}
	
    printf("Enter the Max Matrix\n");    //Reading the Max values to the matrix 'max[][]'
	for(i=0;i< n;i++)
	{
		for(j=0;j< m;j++)
		{
			scanf("%d",&max[i][j]);
		}
	}
    
    printf("Enter the available Resources\n");     //Reading the values of array available[]
	for(j=0;j< m;j++)
	{
		scanf("%d",&available[j]);
	}
	
    
    //We are using an array f to represent the finished status of each process. 
    //Initially setting all processes as not finished. ie. Setting f[i]=0 for each process i.
    for(k=0;k<n;k++)
    {
        f[k]=0;
    }
    
    //Calculating values of the NEED MATRIX using its equation, for all processes
    //Equation is need[i][j] = max[i][j] - allocation[i][j]
    for(i=0;i<n;i++)    //For each process
    {
        for(j=0;j<m;j++)    //For each resource
        {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
}

void show()
{ 
   	 printf("Process\t Allocation\t Max\t Available\tNeed matrix\t");
    	for(i=0;i<n;i++)
	{
		printf("\nP%d\t ",i+1);
		for(j=0;j<m;j++)
		{
			printf("%d ",alloc[i][j]);
		}
		printf("\t\t");
		for(j=0;j<m;j++)
		{
			printf("%d ",max[i][j]);
		}
		printf("\t\t");
		if(i==0)
		{
			for(j=0;j<m;j++)
			printf("%d ",available[j]);
		}
		printf("\t\t");
		for (j= 0; j< m; j++)   
    		{  
        		for(j=0;j<m;j++)
        	 	printf("%d",need[i][j]);  
    		}  
    		printf("\n");
	
	}
    	
}
void safe_seq()
{    
    //Finding safe sequence
    int y=0;
    for(k=0;k<n;k++)    
    {
        for(i=0;i<n;i++)    //For each process
        {
            if(f[i]==0)     
            {
                int flag = 0;   //setting flag as 0 or false.
                for(j=0;j<m;j++)    //For each Resource
                {
                    if(need[i][j] > available[j])    //If Need greater than Available, then
                    {
                        flag=1; //Setting flag as true or 1.
                        //flag=1 means the Need is greater than what is Available for that particular resource.
                        break;
                    }
                }
                
                if(flag==0)
                {
                    ans[ind++] = i;
                    for(y=0;y<m;y++)    //For each Resource
                    {
                        available[y] = available[y] + alloc[i][y];  //Setting availability to current availability + allocation 
                    }
                    f[i]=1; //Declaring the current process as FINISHED.
                }
            }
        }
    }
    
   //Displaying the SAFE SEQUENCE.
    printf("The SAFE SEQUENCE is: \n");
    for(i=0;i<n-1;i++)  //Here loop ends at n-1 because we don't want to printf the arrowmark(->) at the end.printf(" P%d", answer[n-1)
    {
        printf(" P%d ->", ans[i]);
    }
    printf(" P%d", ans[n-1]);    //Printing the final state in safe sequence without printing the arrowmark.

}
void request()
{
     int processreq;
     printf("\n Enter the process process that is requesting:");
     scanf("%d",&processreq);
     printf("\n enter the reqested array:");
     for(i=0;i<m;i++)
      scanf("%d",&req[i]);
     for(j=0;j<m;j++)
     {
       if(req[j]<=need[processreq][j])  

       {
          if(req[j]<=available[j])
           {
            available[j]=available[j]-req[j];
            alloc[processreq][j]=alloc[processreq][j]+req[j];
            need[processreq][j]=need[processreq][j]-req[j];
            printf("avail:%d",available[j]);      

           }
       printf("\tneed: %d\n",need[processreq][j]);
       }
       else
       {
        printf("\n Process is not in safe state and hence request cannot be granted");
        exit(0);
       }
      }
      printf("\nrequest can be granted");
}

Terminal Output:
Enter the number of Resources: 3
Enter the Allocation Matrix
5 7 8
4 5 6
1 2 3
0 2 2
3 0 1
Enter the Max Matrix
2 0 1
5 1 0
5 8 4
0 2 0
0 0 3
Enter the available Resources
2 3 1
Process Allocation Max Available Need matrix
P1 5 7 8 2 0 1 2 3 1 -3-7-7
P2 4 5 6 5 1 0 1-4-6
P3 1 2 3 5 8 4 461
P4 0 2 2 0 2 0 00-2
P5 3 0 1 0 0 3 -302
1.safe sequence 2.request 3.exit
Enter choice : 1
The SAFE SEQUENCE is:
P0 -> P1 -> P2 -> P3 -> P4
1.safe sequence 2.request 3.exit
Enter choice : 2Enter the process process that is requesting:4
enter the reqested array:4 8 9
Process is not in safe state and hence request cannot be grantedstudent
Assignment No.: 03
Title: Implement the C Program tfor CPU Scheduling Algorithms. Shortest Job First (Preemptive) and Round Robin with different arrival time.

SHORTEST JOB FIRST (PREEMPTIVE):

Code:
#include<stdio.h> 
struct sjf 
{ 
       int bt,at,wt,st,pno,tt,cbt; 
}; 

int get(struct sjf arr[],int t,int n) 
{ 
       int imin,min=9999,i; 
       for(i=0;i<n;i++) 
       { 
              if(arr[i].at<=t&&arr[i].st==0) 
                     if(min>arr[i].bt) 
                     { 
                           min=arr[i].bt; 
                           imin=i; 
                     } 
       } 
       return imin; 
} 

void gantt_chart(struct sjf arr[],int p[],int n,int nop) 
{ 
       int i,a[100],s=0; 
       float avgtt=0,avgwt=0; 
       printf("***************************************\n"); 
       printf("GANTT CHART\n"); 
       printf("0"); 
       for(i=0;i<n-1;i++) 
       { 
              while(i<n-1&&p[i]==p[i+1]) 
              { 
                     s++; 
                     i++; 
              } 
               
              s++; 
              printf(" -> [P%d] <- %d",arr[p[i]].pno,s); 
              arr[p[i]].wt=s-arr[p[i]].at-arr[p[i]].tt; 
       } 
       for(i=0;i<nop;i++) 
       { 
              arr[i].tt+=arr[i].wt; 
              avgwt+=arr[i].wt; 
              avgtt+=arr[i].tt; 
       } 
       printf("\n***************************************\n"); 
       printf("Pro\tArTi\tBuTi\tTaTi\tWtTi\n"); 
       printf("***************************************\n"); 
       for(i=0;i<nop;i++) 
       { 
              printf("[P%d]\t%d\t%d\t%d\t%d\n",arr[i].pno,arr[i].at,arr[i].cbt,arr[i].tt,arr[i].wt); 
       } 
       printf("***************************************\n"); 
       avgwt = avgwt/nop; 
       avgtt = avgtt/nop; 
       printf("Average Waiting Time : %.2f\n",avgwt); 
       printf("Average Turnaround Time : %.2f\n",avgtt); 
       return; 
} 

int iscomplite(struct sjf arr[],int n) 
{ 
       int i; 
       for(i=0;i<n;i++) 
              if(arr[i].st==0) 
                     return 0; 
       return 1; 
} 
int main() 
{ 
       int n,i,a,t=0; 
       int p[100]; 
       float avgwt=0,avgtt=0; 
       struct sjf arr[100]; 
       printf("SJF (Shortest Job First) - Preemptive\n"); 
       printf("Note -\n1. Arrival Time of at least on process should be 0\n2. CPU should never be idle\n"); 
       printf("Enter Number of Processes\n"); 
       scanf("%d",&n); 
       for(i=0;i<n;i++) 
       { 
              printf("Enter Arrival Time & Burst Time for Process [P%d]\n",i); 
              scanf("%d%d",&arr[i].at,&arr[i].bt); 
              arr[i].pno = i; 
              arr[i].cbt = arr[i].bt; 
              arr[i].st=0; 
              arr[i].tt=arr[i].bt; 
              arr[i].wt=0; 
       } 
       i=0; 
       while(1) 
       { 
              if(iscomplite(arr,n)) 
                     break; 
              a=get(arr,t,n); 
              p[i]=a; 
              arr[a].bt-=1; 
              if(arr[a].bt==0) 
                     arr[a].st=1; 
              t=t+1; 
              i++; 
       } 
       gantt_chart(arr,p,i,n); 
       return 0; 
}

Output (Terminal):
gcc srtf2.c 
./a.out 

SJF (Shortest Job First) - Preemptive 
Note - 
1. Arrival Time of at least on process should be 0 
2. CPU should never be idle 
Enter Number of Processes 
4 
Enter Arrival Time & Burst Time for Process [P0] 
0 
8 
Enter Arrival Time & Burst Time for Process [P1] 
1 
4 
Enter Arrival Time & Burst Time for Process [P2] 
2 
9 
Enter Arrival Time & Burst Time for Process [P3] 
3 
5 
*************************************** 
GANTT CHART 
0 -> [P0] <- 1 -> [P1] <- 5 -> [P3] <- 10 -> [P0] <- 17 -> [P2] <- 26 
*************************************** 
Pro	ArTi	BuTi	TaTi	WtTi 
*************************************** 
[P0]	0	8	17	9 
[P1]	1	4	4	0 
[P2]	2	9	24	15 
[P3]	3	5	7	2 
*************************************** 
Average Waiting Time : 6.50 
Average Turnaround Time : 13.00 

ROUND ROBIN: 

Code:
#include<stdio.h> 
struct process 
{ 
    int id,AT,BT,WT,TAT; 
}; 

struct process a[10]; 

// declaration of the ready queue 
int queue[100]; 
int front=-1; 
int rear=-1; 

// function for insert the element into queue 
void insert(int n) 
{ 
    if(front==-1) 
     front=0; 
    rear=rear+1; 
    queue[rear]=n; 
} 

// function for delete the element from queue 
int delete() 
{ 
    int n; 
    n=queue[front]; 
    front=front+1; 
    return n; 
} 
int main() 
{ 
    int n,TQ,p,TIME=0,i; 
    int temp[10],exist[10]={0}; 
    float total_wt=0,total_tat=0,Avg_WT,Avg_TAT; 
    printf("Enter the number of the process\n"); 
    scanf("%d",&n); 
    printf("Enter the arrival time and burst time of the process\n"); 
    printf("AT BT\n"); 
    for(i=0;i<n;i++) 
    { 
        scanf("%d%d",&a[i].AT,&a[i].BT); 
        a[i].id=i; 
        temp[i]=a[i].BT; 
    } 
    printf("Enter the time quantum\n"); 
    scanf("%d",&TQ); 
    // logic for round robin scheduling 
     
    // insert first process into ready queue 
    insert(0); 
    exist[0]=1; 
    // until ready queue is empty 
    while(front<=rear) 
    { 
        p=delete(); 
        if(a[p].BT>=TQ) 
        { 
            a[p].BT=a[p].BT-TQ; 
            TIME=TIME+TQ; 
        } 
        else 
        { 
            TIME=TIME+a[p].BT; 
            a[p].BT=0; 
        } 
        
        
        //if process is not exist in the ready queue even a single time then insert it if it arrive at time 'TIME' 
        for(i=0;i<n;i++) 
        { 
            if(exist[i]==0 && a[i].AT<=TIME) 
            { 
                insert(i); 
                exist[i]=1; 
            } 
        } 
        // if process is completed 
        if(a[p].BT==0) 
        { 
            a[p].TAT=TIME-a[p].AT; 
            a[p].WT=a[p].TAT-temp[p]; 
            total_tat=total_tat+a[p].TAT; 
            total_wt=total_wt+a[p].WT; 
        } 
        else 
        { 
            insert(p); 
        } 
    } 
    
    Avg_TAT=total_tat/n; 
    Avg_WT=total_wt/n; 
    
    // printing of the answer 
    printf("ID WT TAT\n"); 
    int j; 
    for(j=0;j<n;j++) 
    { 
        printf("%d  %d  %d\n",a[j].id,a[j].WT,a[j].TAT); 
    } 
    printf("Average waiting time of the processes is : %f\n",Avg_WT); 
    printf("Average turn around time of the processes is : %f\n",Avg_TAT); 
    return 0; 
}

Output (Terminal):
gcc rr.c 
./a.out 

Enter the number of the process 
5 
Enter the arrival time and burst time of the process 
AT BT 
0 
8 
1 
5 
3 
3 
4 
1 
6 
4 
Enter the time quantum 
2 
ID WT TAT 
0  13  21 
1  11  16 
2  10  13 
3  4  5 
4  9  13 
Average waiting time of the processes is : 9.400000 
Average turn around time of the processes is : 13.600000 
